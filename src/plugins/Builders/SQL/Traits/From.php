<?php
//**************************************************************************************
//**************************************************************************************
/**
 * SQL From Trait
 *
 * @package		phpOpenFW
 * @author 		Christian J. Clark
 * @copyright	Copyright (c) Christian J. Clark
 * @license		https://mit-license.org
 **/
//**************************************************************************************
//**************************************************************************************

namespace phpOpenFW\Builders\SQL\Traits;

//**************************************************************************************
/**
 * SQL From Trait
 */
//**************************************************************************************
trait From
{
    //=========================================================================
	// Trait Memebers
    //=========================================================================
	protected $from = [];

    //=========================================================================
    //=========================================================================
	// From Clause Method
    //=========================================================================
    //=========================================================================
	public function From($from)
	{
    	$froms = explode(',', $from);
        foreach ($froms as $tmp_from) {
            $tmp_from = trim($tmp_from);
            if ($tmp_from) {
            	$this->AddItem($this->from, $tmp_from);
            }
        }
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Raw From Clause Method
    //=========================================================================
    //=========================================================================
	public function FromRaw($from)
	{
    	if ($from && is_scalar($from)) {
            $this->AddItem($this->from, $from);
        }
        return $this;
	}

    //##################################################################################
    //##################################################################################
    //##################################################################################
    // Protected / Internal Methods
    //##################################################################################
    //##################################################################################
    //##################################################################################

    //=========================================================================
    //=========================================================================
    // Format From Method
    //=========================================================================
    //=========================================================================
    protected function FormatFrom()
    {
        if ($this->from) {
    		return "FROM\n  " . implode(",\n  ", $this->from);
        }

        return false;
    }

}
