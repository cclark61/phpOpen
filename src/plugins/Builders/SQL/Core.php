<?php
//**************************************************************************************
//**************************************************************************************
/**
 * SQL Core Class
 *
 * @package		phpOpenFW
 * @author 		Christian J. Clark
 * @copyright	Copyright (c) Christian J. Clark
 * @license		https://mit-license.org
 **/
//**************************************************************************************
//**************************************************************************************

namespace phpOpenFW\Builders\SQL;

//**************************************************************************************
/**
 * SQL Core Class
 */
//**************************************************************************************
abstract class Core
{

    //=========================================================================
	// Class Memebers
    //=========================================================================
	protected $opts = [];
    protected $sql_type = false;
	protected $db_type = 'mysql';
	protected $bind_params = [];
	protected $bp_index = 0;
	protected $table = false;
	protected $fields = [];
	protected $from = [];
	protected $where = [0 => []];
	protected $where_pos = 0;
	
    //=========================================================================
    //=========================================================================
    // Constructor Method
    //=========================================================================
    //=========================================================================
    public function __construct() {}

    //=========================================================================
    //=========================================================================
    // Get Instance Method
    //=========================================================================
    //=========================================================================
    public static function Instance()
    {
        return new static();
    }

    //=========================================================================
    //=========================================================================
    // To String Method
    //=========================================================================
    //=========================================================================
    public function __toString()
    {
		return $this->GetSQL();
	}

    //=========================================================================
    //=========================================================================
    // Set Option Method
    //=========================================================================
    //=========================================================================
    public function SetOpt($key, $val)
    {
	    if ($key == '') { return false; }
	    $this->opts[$key] = $val;
	    return $this;
    }

    //=========================================================================
    //=========================================================================
    // Get Option Method
    //=========================================================================
    //=========================================================================
    public function GetOpt($key)
    {
	    if ($key == '') { return false; }
	    if (isset($this->opts[$key])) {
		    return $this->opts[$key];
	    }
	    return false;
    }

    //=========================================================================
    //=========================================================================
    // Get SQL Method
    //=========================================================================
    //=========================================================================
    public function GetSQL()
    {
		trigger_error('The GetSQL() method has not been implemented.');
		return false;
	}

    //=========================================================================
    //=========================================================================
    // Get Bind Parameters Method
    //=========================================================================
    //=========================================================================
    public function GetBindParams()
    {
		return $this->bind_params;
	}

    //=========================================================================
    //=========================================================================
    // Execute Method
    //=========================================================================
    //=========================================================================
    public function Execute($data_source=false, Array $args=[])
    {
	    $return_format = false;
	    $return_handle = false;
	    extract($args);
	    $sql = $this->GetSQL();
	    $params = $this->bind_params;
	    if ($return_handle) {
		    return qdb_result($data_source, $sql, $this->bind_params);
	    }
	    else {
			return \phpOpenFW\Database\QDB::qdb_exec($data_source, $sql, $this->bind_params, $return_format);
		}
	}

    //=========================================================================
    //=========================================================================
	// Select Clause Method
    //=========================================================================
    //=========================================================================
	public function Fields($fields)
	{
    	return $this->AddItem($this->fields, $fields);
	}

    //=========================================================================
    //=========================================================================
	// From Clause Method
    //=========================================================================
    //=========================================================================
	public function From($from)
	{
    	return $this->AddItem($this->from, $from);
	}

    //=========================================================================
    //=========================================================================
	// Where Clause Method
    //=========================================================================
    //=========================================================================
	public function Where()
	{
    	$args = func_get_args();
    	if (count($args) == 1 && $args[0] == '') {
        	return $this;
    	}
    	foreach ($args as $arg) {
        	if (!is_array($arg)) {
            	trigger_error('Each Where() method parameter must be passed as an array.', E_USER_ERROR);
        	}
        	if (!$arg) { continue; }

    	}
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// And Where Clause Method
    //=========================================================================
    //=========================================================================
	public function AndWhere($field, $op, $val)
	{
    	
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// OrWhere Clause Method
    //=========================================================================
    //=========================================================================
	public function OrWhere($field, $op, $val)
	{
    	
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Group Clause Method
    //=========================================================================
    //=========================================================================
	public function WhereGroup($field, $op, $val)
	{
    	
        return $this;
	}

    //#####################################################################################
    //#####################################################################################
    // Protected Methods
    //#####################################################################################
    //#####################################################################################

    //=========================================================================
    //=========================================================================
	// Add Item Method
    //=========================================================================
    //=========================================================================
	protected function AddItem(&$var, $val)
	{
		if (is_null($val)) {
			$var = [];
		}
		else {
			if (is_array($val)) {
				$var = array_merge($var, $val);
			}
			else if ($val != '') {
				$var[] = $val;
			}
		}
		return $this;
	}

    //=========================================================================
    //=========================================================================
	// Add Bind Parameter Method
    //=========================================================================
    //=========================================================================
	protected function AddBindParam($value, $type='i')
	{
        //-------------------------------------------------------
        // Default Placeholder
        //-------------------------------------------------------
        $placeholder = '?';

        //-------------------------------------------------------
        // Some DBs handle bind parameters a little different...
        //-------------------------------------------------------
        switch ($this->db_type) {

            case 'mysql':
                if (!isset($this->bind_params[0])) {
                    $this->bind_params[0] = '';
                }
                $this->bind_params[0] .= $type;
                break;

            case 'pgsql':
            case 'sqlsrv':
                $this->bind_params[] = $value;
                break;

            case 'oracle':
                $placeholder = ':p' . $this->bp_index;
                $this->bp_index++;
                break;
                
        }

        //-------------------------------------------------------
        // Add Value to Bind Parameters
        //-------------------------------------------------------
        $this->bind_params[] = $value;

        //-------------------------------------------------------
        // Return the placeholder
        //-------------------------------------------------------
        return $placeholder;
    }

    //#####################################################################################
    //#####################################################################################
    // Formatting Methods
    //#####################################################################################
    //#####################################################################################

    //=========================================================================
    //=========================================================================
	// Format Where Clause Method
    //=========================================================================
    //=========================================================================
	protected function FormatWhere()
	{

	}

}
