<?php
//**************************************************************************************
//**************************************************************************************
/**
 * Condition Trait
 *
 * @package		phpOpenFW
 * @author 		Christian J. Clark
 * @copyright	Copyright (c) Christian J. Clark
 * @license		https://mit-license.org
 **/
//**************************************************************************************
//**************************************************************************************

namespace phpOpenFW\Builders\SQL\Conditions;

//**************************************************************************************
/**
 * Condition Trait
 */
//**************************************************************************************
trait Condition
{
    //=========================================================================
    // Class Members
    //=========================================================================

    //-----------------------------------------------------------------
    // Database Type (REQUIRED)
    //-----------------------------------------------------------------
    //protected static $db_type = '';

    //=========================================================================
    //=========================================================================
    // Equals
    //=========================================================================
    //=========================================================================
    public static function Equals(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Not Equals
    //=========================================================================
    //=========================================================================
    public static function NotEquals(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '!=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Less Than
    //=========================================================================
    //=========================================================================
    public static function LessThan(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '<', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Less Than Or Equal
    //=========================================================================
    //=========================================================================
    public static function LessThanOrEqual(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '<=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Greater Than
    //=========================================================================
    //=========================================================================
    public static function GreaterThan(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '>', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Greater Than Or Equal
    //=========================================================================
    //=========================================================================
    public static function GreaterThanOrEqual(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, '>=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Like
    //=========================================================================
    //=========================================================================
    public static function Like(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, 'LIKE', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // NOT Like
    //=========================================================================
    //=========================================================================
    public static function NotLike(String $field, $value, Array &$params, String $type='i')
    {
        return self::SingleValueCondition($field, $value, 'NOT LIKE', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Is Null
    //=========================================================================
    //=========================================================================
    public static function IsNull(String $field)
    {
        //-----------------------------------------------------------------
        // Check if field is empty
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }

        return "{$field} IS NULL";
    }

    //=========================================================================
    //=========================================================================
    // Is NOT Null
    //=========================================================================
    //=========================================================================
    public static function IsNotNull(String $field)
    {
        //-----------------------------------------------------------------
        // Check if field is empty
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }

        return "{$field} IS NOT NULL";
    }

    //=========================================================================
    //=========================================================================
    // In
    //=========================================================================
    //=========================================================================
    public static function In(String $field, $values, Array &$params, String $type='i')
    {
        return self::MultipleValueCondition($field, $values, 'IN', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // NOT In
    //=========================================================================
    //=========================================================================
    public static function NotIn(String $field, $values, Array &$params, String $type='i')
    {
        return self::MultipleValueCondition($field, $values, 'NOT IN', $params, $type);
    }

    //##################################################################################
    //##################################################################################
    //##################################################################################
    // Protected / Internal Methods
    //##################################################################################
    //##################################################################################
    //##################################################################################

    //=========================================================================
    //=========================================================================
    // Single Value Condition
    //=========================================================================
    //=========================================================================
    protected static function SingleValueCondition(String $field, $value, String $op, Array &$params, String $type='i')
    {
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }
        if (!is_scalar($value)) {
            throw new \Exception("Value must be a scalar value.");
        }

        //-----------------------------------------------------------------
        // Add Bind Parameter
        //-----------------------------------------------------------------
        $place_holder = self::AddBindParam($params, $value, $type);

        //-----------------------------------------------------------------
        // Create and Return Condition
        //-----------------------------------------------------------------
        return "{$field} {$op} {$place_holder}";
    }

    //=========================================================================
    //=========================================================================
    // Multiple Value Condition
    //=========================================================================
    //=========================================================================
    protected static function MultipleValueCondition(String $field, Array $values, String $op, Array &$params, String $type='i')
    {
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }
        if (!$values) {
            return false;
        }

        //-----------------------------------------------------------------
        // Loop Through Values
        //-----------------------------------------------------------------
        $place_holders = '';
        foreach ($values as $value) {
            $tmp_ph = self::AddBindParam($params, $value, $type);
            $place_holders .= ($place_holders) ? (', ' . $tmp_ph) : ($tmp_ph);
        }

        //-----------------------------------------------------------------
        // Create and Return Condition
        //-----------------------------------------------------------------
        return "{$field} {$op} ({$place_holders})";
    }

    //=========================================================================
    //=========================================================================
    // Add Bind Parameter
    //=========================================================================
    //=========================================================================
    public static function AddBindParam(Array &$params, $value, $type='i')
    {
        //-----------------------------------------------------------------
        // Which Class is using this trait?
        //-----------------------------------------------------------------
        // (i.e. How do we add the bind parameter?)
        //-----------------------------------------------------------------
        switch (static::$db_type) {

            //-----------------------------------------------------------------
            // MySQL
            //-----------------------------------------------------------------
            case 'mysql':
                if (count($params) == 0) {
                    $params[] = '';
                }
                $params[0] .= $type;
                $params[] = $value;
                return '?';
                break;

            //-----------------------------------------------------------------
            // PgSQL
            //-----------------------------------------------------------------
            case 'pgsql':
                $index = count($params);
                $ph = '$' . $index;
                if (isset($params[$index])) {
                    throw new \Exception("An error occurred trying to add the PostgreSQL bind parameter. Parameter index already in use.");
                }
                $params[$index] = $value;
                return $ph;
                break;

            //-----------------------------------------------------------------
            // Oracle
            //-----------------------------------------------------------------
            case 'oracle':
                $index = count($params);
                $ph = 'p' . $index;
                if (isset($params[$ph])) {
                    throw new \Exception("An error occurred trying to add the Oracle bind parameter. Parameter index already in use.");
                }
                $params[$ph] = $value;
                return ':' . $ph;
                break;

            //-----------------------------------------------------------------
            // Default
            //-----------------------------------------------------------------
            default:
                $params[] = $value;
                return '?';
                break;

        }
    }

}
