<?php
//**************************************************************************************
//**************************************************************************************
/**
 * Condition Trait
 *
 * @package		phpOpenFW
 * @author 		Christian J. Clark
 * @copyright	Copyright (c) Christian J. Clark
 * @license		https://mit-license.org
 **/
//**************************************************************************************
//**************************************************************************************

namespace phpOpenFW\Builders\SQL\Conditions;

//**************************************************************************************
/**
 * Condition Trait
 */
//**************************************************************************************
trait Condition
{
    //=========================================================================
    // Class Members
    //=========================================================================

    //-----------------------------------------------------------------
    // Database Type (REQUIRED)
    //-----------------------------------------------------------------
    //protected static $db_type = '';

    //=========================================================================
    //=========================================================================
    // Equals
    //=========================================================================
    //=========================================================================
    public static function Equals(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '=', $params, $type);
    }
    public static function eq(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Not Equals
    //=========================================================================
    //=========================================================================
    public static function NotEquals(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '!=', $params, $type);
    }
    public static function neq(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '!=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Less Than
    //=========================================================================
    //=========================================================================
    public static function LessThan(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '<', $params, $type);
    }
    public static function lt(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '<', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Less Than Or Equal
    //=========================================================================
    //=========================================================================
    public static function LessThanOrEqual(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '<=', $params, $type);
    }
    public static function ltoe(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '<=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Greater Than
    //=========================================================================
    //=========================================================================
    public static function GreaterThan(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '>', $params, $type);
    }
    public static function gt(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '>', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Greater Than Or Equal
    //=========================================================================
    //=========================================================================
    public static function GreaterThanOrEqual(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '>=', $params, $type);
    }
    public static function gtoe(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, '>=', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Like
    //=========================================================================
    //=========================================================================
    public static function Like(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, 'LIKE', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // NOT Like
    //=========================================================================
    //=========================================================================
    public static function NotLike(String $field, $value, Array &$params, String $type='s')
    {
        return self::SingleValueCondition($field, $value, 'NOT LIKE', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // Is Null
    //=========================================================================
    //=========================================================================
    public static function IsNull(String $field)
    {
        //-----------------------------------------------------------------
        // Check if field is empty
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }

        return "{$field} IS NULL";
    }

    //=========================================================================
    //=========================================================================
    // Is NOT Null
    //=========================================================================
    //=========================================================================
    public static function IsNotNull(String $field)
    {
        //-----------------------------------------------------------------
        // Check if field is empty
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }

        return "{$field} IS NOT NULL";
    }

    //=========================================================================
    //=========================================================================
    // In
    //=========================================================================
    //=========================================================================
    public static function In(String $field, $values, Array &$params, String $type='s')
    {
        return self::MultipleValueCondition($field, $values, 'IN', $params, $type);
    }

    //=========================================================================
    //=========================================================================
    // NOT In
    //=========================================================================
    //=========================================================================
    public static function NotIn(String $field, $values, Array &$params, String $type='s')
    {
        return self::MultipleValueCondition($field, $values, 'NOT IN', $params, $type);
    }

    //##################################################################################
    //##################################################################################
    //##################################################################################
    // Protected / Internal Methods
    //##################################################################################
    //##################################################################################
    //##################################################################################

    //=========================================================================
    //=========================================================================
    // Single Value Condition
    //=========================================================================
    //=========================================================================
    protected static function SingleValueCondition(String $field, $value, String $op, Array &$params, String $type='s')
    {
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }
        if (!is_scalar($value)) {
            throw new \Exception("Value must be a scalar value.");
        }

        //-----------------------------------------------------------------
        // Add Bind Parameter
        //-----------------------------------------------------------------
        $place_holder = \phpOpenFW\Builders\SQL\Aux::AddBindParam(static::$db_type, $params, $value, $type);

        //-----------------------------------------------------------------
        // Create and Return Condition
        //-----------------------------------------------------------------
        return "{$field} {$op} {$place_holder}";
    }

    //=========================================================================
    //=========================================================================
    // Multiple Value Condition
    //=========================================================================
    //=========================================================================
    protected static function MultipleValueCondition(String $field, Array $values, String $op, Array &$params, String $type='s')
    {
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }
        if (!$values) {
            return false;
        }

        //-----------------------------------------------------------------
        // Add Bind Parameters
        //-----------------------------------------------------------------
        $place_holders = \phpOpenFW\Builders\SQL\Aux::AddBindParams(static::$db_type, $params, $values, $type);

        //-----------------------------------------------------------------
        // Create and Return Condition
        //-----------------------------------------------------------------
        return "{$field} {$op} ({$place_holders})";
    }


}
