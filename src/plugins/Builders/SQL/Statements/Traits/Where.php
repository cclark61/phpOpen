<?php
//**************************************************************************************
//**************************************************************************************
/**
 * SQL Where Trait
 *
 * @package		phpOpenFW
 * @author 		Christian J. Clark
 * @copyright	Copyright (c) Christian J. Clark
 * @license		https://mit-license.org
 **/
//**************************************************************************************
//**************************************************************************************

namespace phpOpenFW\Builders\SQL\Statements\Traits;
use \Closure;

//**************************************************************************************
/**
 * SQL Where Trait
 */
//**************************************************************************************
trait Where
{
    //=========================================================================
    // Traits
    //=========================================================================

    //=========================================================================
	// Trait Memebers
    //=========================================================================
	protected $wheres = [];

    //=========================================================================
    //=========================================================================
	// Where Method
    //=========================================================================
    //=========================================================================
	public function Where($field, $op=null, $val=false, $type='s')
	{
        $this->AddWhereCondition($field, $op, $val, $type, 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Method
    //=========================================================================
    //=========================================================================
	public function OrWhere($field, $op=null, $val=false, $type='s')
	{
        $this->AddWhereCondition($field, $op, $val, $type, 'or');    	
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Between Method
    //=========================================================================
    //=========================================================================
	public function WhereBetween(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'BETWEEN', $val, $type, 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Between Method
    //=========================================================================
    //=========================================================================
	public function OrWhereBetween(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'BETWEEN', $val, $type, 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Not Between Method
    //=========================================================================
    //=========================================================================
	public function WhereNotBetween(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'NOT BETWEEN', $val, $type, 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Not Between Method
    //=========================================================================
    //=========================================================================
	public function OrWhereNotBetween(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'NOT BETWEEN', $val, $type, 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where In Method
    //=========================================================================
    //=========================================================================
	public function WhereIn(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'IN', $val, $type, 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where In Method
    //=========================================================================
    //=========================================================================
	public function OrWhereIn(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'IN', $val, $type, 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Not In Method
    //=========================================================================
    //=========================================================================
	public function WhereNotIn(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'NOT IN', $val, $type, 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Not In Method
    //=========================================================================
    //=========================================================================
	public function OrWhereNotIn(String $field, Array $val, $type='s')
	{
        $this->AddWhereCondition($field, 'NOT IN', $val, $type, 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Is Null Method
    //=========================================================================
    //=========================================================================
	public function WhereNull(String $field)
	{
        $this->AddWhereCondition($field, 'IS NULL', null, '', 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Is Null Method
    //=========================================================================
    //=========================================================================
	public function OrWhereNull(String $field)
	{
        $this->AddWhereCondition($field, 'IS NULL', null, '', 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Is Not Null Method
    //=========================================================================
    //=========================================================================
	public function WhereNotNull(String $field)
	{
        $this->AddWhereCondition($field, 'IS NOT NULL', null, '', 'and');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Is Null Method
    //=========================================================================
    //=========================================================================
	public function OrWhereNotNull(String $field)
	{
        $this->AddWhereCondition($field, 'IS NOT NULL', null, '', 'or');
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Where Column Method
    //=========================================================================
    //=========================================================================
	public function WhereColumn(String $field1, String $op, String $field2='', $andor='and')
	{
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field1) {
            throw new \Exception("Invalid field name given.");
        }

        //-----------------------------------------------------------------
        // No Operator
        //-----------------------------------------------------------------
        if ($field2 == '' && !self::IsValidOperator($op)) {
            $field2 = $op;
            $op = '=';
        }

        $this->wheres[] = [$andor, "{$field1} {$op} {$field2}"];
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Column Method
    //=========================================================================
    //=========================================================================
	public function OrWhereColumn(String $field1, String $op, String $field2='')
	{
    	$this->WhereColumn($field1, $op, $field2, 'or');
        return $this;
    }

    //=========================================================================
    //=========================================================================
	// On Method (Alias of WhereColumn)
    //=========================================================================
    //=========================================================================
	public function On(String $field1, String $op, String $field2='')
    {
        $this->WhereColumn($field1, $op, $field2);
        return $this;
    }

    //=========================================================================
    //=========================================================================
	// Or On Method (Alias of WhereColumn w/ Or)
    //=========================================================================
    //=========================================================================
	public function OrOn(String $field1, String $op, String $field2='')
    {
        $this->WhereColumn($field1, $op, $field2, 'or');
        return $this;
    }

    //=========================================================================
    //=========================================================================
	// Where Raw Method
    //=========================================================================
    //=========================================================================
	public function WhereRaw(String $where_raw, $andor='and')
	{
        if ($where_raw) {
            $this->wheres[] = [$andor, $where_raw];
        }
        return $this;
	}

    //=========================================================================
    //=========================================================================
	// Or Where Raw Method
    //=========================================================================
    //=========================================================================
	public function OrWhereRaw(String $where_raw)
	{
        $this->WhereRaw($where_raw, 'or');
        return $this;
    }

    //##################################################################################
    //##################################################################################
    //##################################################################################
    // Protected / Internal Methods
    //##################################################################################
    //##################################################################################
    //##################################################################################

    //=========================================================================
    //=========================================================================
	// Add Where Condition Method
    //=========================================================================
    //=========================================================================
	protected function AddWhereCondition($field, $op, $val, $type, $andor='and')
	{
        //-----------------------------------------------------------------
        // Validate Parameters
        //-----------------------------------------------------------------
        if (!$field) {
            throw new \Exception("Invalid field name given.");
        }

        //-----------------------------------------------------------------
        // Array: Multiple Conditions
        //-----------------------------------------------------------------
        if (is_array($field)) {
            foreach ($field as $tmp_field) {
                
            }
        }
        //-----------------------------------------------------------------
        // Anonymous Function: Nested
        //-----------------------------------------------------------------
        else if ($field instanceof Closure) {
        	$nested = new \phpOpenFW\Builders\SQL\Statements\NestedConditions($this, $this->depth+1);
        	$field($nested);
        	$rear_pad = str_repeat(' ', 2 + ($this->depth * 2));
        	$this->wheres[] = [$andor, "({$nested}\n{$rear_pad})"];
        }
        //-----------------------------------------------------------------
        // Single Condition
        //-----------------------------------------------------------------
        else if (is_scalar($field) && is_string($field)) {
            $this->wheres[] = [$andor, self::Condition($this->db_type, $field, $op, $val, $this->bind_params, $type)];
        }
        //-----------------------------------------------------------------
        // Unknown: Throw Exception
        //-----------------------------------------------------------------
        else {
            throw new \Exception("Invalid field given.");
        }
	}

    //=========================================================================
    //=========================================================================
	// Format Where Clause Method
    //=========================================================================
    //=========================================================================
	protected function FormatWhere()
	{
        $clause = '';
        $front_pad = str_repeat(' ', 2 + ($this->depth * 2));
        foreach ($this->wheres as $where) {
            if (is_array($where)) {
                if ($clause) {
                    $clause .= "\n{$front_pad}{$where[0]} {$where[1]}";
                }
                else {
                    $clause .= "\n{$front_pad}{$where[1]}";
                }
            }
            else {
                $clause .= "\n{$front_pad}{$where}";
            }
        }
        if (!$this->depth) {
            $clause = "WHERE " . $clause;
        }
        return $clause;
	}

}
